program
---------------
Token = reserved word: read

stmt-sequence
EOF
---------------
Token = reserved word: read

statement
stmt'
EOF
---------------
Token = reserved word: read

read-stmt
stmt'
EOF
---------------
Token = reserved word: read

read
identifier
stmt'
EOF
---------------
Token = reserved word: read

identifier
stmt'
EOF
---------------
Token = ID, name= x

stmt'
EOF
---------------
Token = ;

;
statement
stmt'
EOF
---------------
Token = ;

statement
stmt'
EOF
---------------
Token = reserved word: if

if-stmt
stmt'
EOF
---------------
Token = reserved word: if

if
exp
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = reserved word: if

exp
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

simple-exp
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

term
simple-exp'
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

factor
term'
simple-exp'
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

number
term'
simple-exp'
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

term'
simple-exp'
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = <

simple-exp'
cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = <

cmp-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = <

comparison-op
simple-exp
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = <

<
simple-exp
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = <

simple-exp
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = ID, name= x

term
simple-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = ID, name= x

factor
term'
simple-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = ID, name= x

identifier
term'
simple-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = reserved word: then

simple-exp'
then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = reserved word: then

then
stmt-sequence
else-part'
stmt'
EOF
---------------
Token = reserved word: then

stmt-sequence
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

statement
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

assign-stmt
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

identifier
:=
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

:=
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = :=

exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

simple-exp
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

term
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

factor
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

number
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

stmt'
else-part'
stmt'
EOF
---------------
Token = ;

;
statement
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

statement
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: repeat

repeat-stmt
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: repeat

repeat
stmt-sequence
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: repeat

stmt-sequence
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

statement
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

assign-stmt
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

identifier
:=
exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

:=
exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = :=

exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

simple-exp
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

identifier
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = *

mulop
factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = *

*
factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = *

factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = (

(
exp
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = (

exp
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

simple-exp
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

term
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

factor
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

identifier
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = /

mulop
factor
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = /

/
factor
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = /

factor
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 3

number
term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 3

term'
simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = )

simple-exp'
cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = )

cmp-exp'
)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = )

)
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = )

term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

;
statement
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

statement
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

assign-stmt
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

identifier
:=
exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

:=
exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = :=

exp
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

simple-exp
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

identifier
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = -

simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = -

addop
term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = -

-
term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = -

term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

number
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 1

term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = +

simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = +

addop
term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = +

+
term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = +

term
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

factor
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

number
term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

term'
simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: until

simple-exp'
cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: until

cmp-exp'
stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: until

stmt'
until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: until

until
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: until

exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

simple-exp
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

term
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

factor
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= x

identifier
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = =

simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = =

cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = =

comparison-op
simple-exp
stmt'
else-part'
stmt'
EOF
---------------
Token = =

=
simple-exp
stmt'
else-part'
stmt'
EOF
---------------
Token = =

simple-exp
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

term
simple-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

factor
term'
simple-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

number
term'
simple-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = NUM, val= 0

term'
simple-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

simple-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

stmt'
else-part'
stmt'
EOF
---------------
Token = ;

;
statement
stmt'
else-part'
stmt'
EOF
---------------
Token = ;

statement
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: write

write-stmt
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: write

write
exp
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: write

exp
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

simple-exp
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

term
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

factor
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= fact

identifier
term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: else

simple-exp'
cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: else

cmp-exp'
stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: else

stmt'
else-part'
stmt'
EOF
---------------
Token = reserved word: else

else-part'
stmt'
EOF
---------------
Token = reserved word: else

else
stmt-sequence
end
stmt'
EOF
---------------
Token = reserved word: else

stmt-sequence
end
stmt'
EOF
---------------
Token = reserved word: write

statement
stmt'
end
stmt'
EOF
---------------
Token = reserved word: write

write-stmt
stmt'
end
stmt'
EOF
---------------
Token = reserved word: write

write
exp
stmt'
end
stmt'
EOF
---------------
Token = reserved word: write

exp
stmt'
end
stmt'
EOF
---------------
Token = ID, name= fact

simple-exp
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = ID, name= fact

term
simple-exp'
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = ID, name= fact

factor
term'
simple-exp'
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = ID, name= fact

identifier
term'
simple-exp'
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = ID, name= identifier

term'
simple-exp'
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = reserved word: end

simple-exp'
cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = reserved word: end

cmp-exp'
stmt'
end
stmt'
EOF
---------------
Token = reserved word: end

stmt'
end
stmt'
EOF
---------------
Token = reserved word: end

end
stmt'
EOF
---------------
Token = reserved word: end

stmt'
EOF
---------------
Token = EOF

EOF
---------------
Token = EOF

YES
